{"ast":null,"code":"// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\"\n  };\n};\n\nconst fetchDataSuccess = payload => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst fetchDataFailed = payload => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload\n  };\n};\n\nexport const fetchData = account => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n\n    try {\n      let name = await store.getState().blockchain.smartContract.methods.name().call();\n      let totalSupply = await store.getState().blockchain.smartContract.methods.totalSupply().call();\n      let cost = await store.getState().blockchain.smartContract.methods.cost().call();\n      dispatch(fetchDataSuccess({\n        name,\n        totalSupply,\n        cost\n      }));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Sean.000/Desktop/_NFT_Storage/example_nft_minter/src/redux/data/dataActions.js"],"names":["store","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","fetchData","account","dispatch","name","getState","blockchain","smartContract","methods","call","totalSupply","cost","err","console","log"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJD;;AAMA,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;AACpC,SAAO;AACLF,IAAAA,IAAI,EAAE,oBADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,MAAMC,eAAe,GAAID,OAAD,IAAa;AACnC,SAAO;AACLF,IAAAA,IAAI,EAAE,mBADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,OAAO,MAAME,SAAS,GAAIC,OAAD,IAAa;AACpC,SAAO,MAAOC,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;;AACA,QAAI;AACF,UAAIQ,IAAI,GAAG,MAAMT,KAAK,CACnBU,QADc,GAEdC,UAFc,CAEHC,aAFG,CAEWC,OAFX,CAEmBJ,IAFnB,GAGdK,IAHc,EAAjB;AAIA,UAAIC,WAAW,GAAG,MAAMf,KAAK,CAC1BU,QADqB,GAErBC,UAFqB,CAEVC,aAFU,CAEIC,OAFJ,CAEYE,WAFZ,GAGrBD,IAHqB,EAAxB;AAIA,UAAIE,IAAI,GAAG,MAAMhB,KAAK,CACnBU,QADc,GAEdC,UAFc,CAEHC,aAFG,CAEWC,OAFX,CAEmBG,IAFnB,GAGdF,IAHc,EAAjB;AAKAN,MAAAA,QAAQ,CACNL,gBAAgB,CAAC;AACfM,QAAAA,IADe;AAEfM,QAAAA,WAFe;AAGfC,QAAAA;AAHe,OAAD,CADV,CAAR;AAOD,KArBD,CAqBE,OAAOC,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAT,MAAAA,QAAQ,CAACH,eAAe,CAAC,oCAAD,CAAhB,CAAR;AACD;AACF,GA3BD;AA4BD,CA7BM","sourcesContent":["// log\r\nimport store from \"../store\";\r\n\r\nconst fetchDataRequest = () => {\r\n  return {\r\n    type: \"CHECK_DATA_REQUEST\",\r\n  };\r\n};\r\n\r\nconst fetchDataSuccess = (payload) => {\r\n  return {\r\n    type: \"CHECK_DATA_SUCCESS\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst fetchDataFailed = (payload) => {\r\n  return {\r\n    type: \"CHECK_DATA_FAILED\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const fetchData = (account) => {\r\n  return async (dispatch) => {\r\n    dispatch(fetchDataRequest());\r\n    try {\r\n      let name = await store\r\n        .getState()\r\n        .blockchain.smartContract.methods.name()\r\n        .call();\r\n      let totalSupply = await store\r\n        .getState()\r\n        .blockchain.smartContract.methods.totalSupply()\r\n        .call();\r\n      let cost = await store\r\n        .getState()\r\n        .blockchain.smartContract.methods.cost()\r\n        .call();\r\n\r\n      dispatch(\r\n        fetchDataSuccess({\r\n          name,\r\n          totalSupply,\r\n          cost,\r\n        })\r\n      );\r\n    } catch (err) {\r\n      console.log(err);\r\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}