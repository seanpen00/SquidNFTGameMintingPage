{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Sean.000/Desktop/_NFT_Storage/example_nft_minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/Sean.000/Desktop/_NFT_Storage/example_nft_minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";// log\nimport store from\"../store\";var fetchDataRequest=function fetchDataRequest(){return{type:\"CHECK_DATA_REQUEST\"};};var fetchDataSuccess=function fetchDataSuccess(payload){return{type:\"CHECK_DATA_SUCCESS\",payload:payload};};var fetchDataFailed=function fetchDataFailed(payload){return{type:\"CHECK_DATA_FAILED\",payload:payload};};export var fetchData=function fetchData(account){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var name,totalSupply,cost;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(fetchDataRequest());_context.prev=1;_context.next=4;return store.getState().blockchain.smartContract.methods.name().call();case 4:name=_context.sent;_context.next=7;return store.getState().blockchain.smartContract.methods.totalSupply().call();case 7:totalSupply=_context.sent;_context.next=10;return store.getState().blockchain.smartContract.methods.cost().call();case 10:cost=_context.sent;dispatch(fetchDataSuccess({name:name,totalSupply:totalSupply,cost:cost}));_context.next=18;break;case 14:_context.prev=14;_context.t0=_context[\"catch\"](1);console.log(_context.t0);dispatch(fetchDataFailed(\"Could not load data from contract.\"));case 18:case\"end\":return _context.stop();}}},_callee,null,[[1,14]]);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["C:/Users/Sean.000/Desktop/_NFT_Storage/example_nft_minter/src/redux/data/dataActions.js"],"names":["store","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","fetchData","account","dispatch","getState","blockchain","smartContract","methods","name","call","totalSupply","cost","console","log"],"mappings":"6VAAA;AACA,MAAOA,CAAAA,KAAP,KAAkB,UAAlB,CAEA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,EAAM,CAC7B,MAAO,CACLC,IAAI,CAAE,oBADD,CAAP,CAGD,CAJD,CAMA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,OAAD,CAAa,CACpC,MAAO,CACLF,IAAI,CAAE,oBADD,CAELE,OAAO,CAAEA,OAFJ,CAAP,CAID,CALD,CAOA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACD,OAAD,CAAa,CACnC,MAAO,CACLF,IAAI,CAAE,mBADD,CAELE,OAAO,CAAEA,OAFJ,CAAP,CAID,CALD,CAOA,MAAO,IAAME,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,OAAD,CAAa,CACpC,+FAAO,iBAAOC,QAAP,4IACLA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR,CADK,sCAGcD,CAAAA,KAAK,CACnBS,QADc,GAEdC,UAFc,CAEHC,aAFG,CAEWC,OAFX,CAEmBC,IAFnB,GAGdC,IAHc,EAHd,QAGCD,IAHD,qCAOqBb,CAAAA,KAAK,CAC1BS,QADqB,GAErBC,UAFqB,CAEVC,aAFU,CAEIC,OAFJ,CAEYG,WAFZ,GAGrBD,IAHqB,EAPrB,QAOCC,WAPD,sCAWcf,CAAAA,KAAK,CACnBS,QADc,GAEdC,UAFc,CAEHC,aAFG,CAEWC,OAFX,CAEmBI,IAFnB,GAGdF,IAHc,EAXd,SAWCE,IAXD,eAgBHR,QAAQ,CACNL,gBAAgB,CAAC,CACfU,IAAI,CAAJA,IADe,CAEfE,WAAW,CAAXA,WAFe,CAGfC,IAAI,CAAJA,IAHe,CAAD,CADV,CAAR,CAhBG,iFAwBHC,OAAO,CAACC,GAAR,cACAV,QAAQ,CAACH,eAAe,CAAC,oCAAD,CAAhB,CAAR,CAzBG,qEAAP,+DA4BD,CA7BM","sourcesContent":["// log\r\nimport store from \"../store\";\r\n\r\nconst fetchDataRequest = () => {\r\n  return {\r\n    type: \"CHECK_DATA_REQUEST\",\r\n  };\r\n};\r\n\r\nconst fetchDataSuccess = (payload) => {\r\n  return {\r\n    type: \"CHECK_DATA_SUCCESS\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst fetchDataFailed = (payload) => {\r\n  return {\r\n    type: \"CHECK_DATA_FAILED\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const fetchData = (account) => {\r\n  return async (dispatch) => {\r\n    dispatch(fetchDataRequest());\r\n    try {\r\n      let name = await store\r\n        .getState()\r\n        .blockchain.smartContract.methods.name()\r\n        .call();\r\n      let totalSupply = await store\r\n        .getState()\r\n        .blockchain.smartContract.methods.totalSupply()\r\n        .call();\r\n      let cost = await store\r\n        .getState()\r\n        .blockchain.smartContract.methods.cost()\r\n        .call();\r\n\r\n      dispatch(\r\n        fetchDataSuccess({\r\n          name,\r\n          totalSupply,\r\n          cost,\r\n        })\r\n      );\r\n    } catch (err) {\r\n      console.log(err);\r\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}